/*
 * generated by Xtext 2.23.0
 */
package org.xtext.gameuno.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.gameuno.services.UnoDslGrammarAccess;
import org.xtext.gameuno.unoDsl.Carte;
import org.xtext.gameuno.unoDsl.CarteActive;
import org.xtext.gameuno.unoDsl.CarteClassique;
import org.xtext.gameuno.unoDsl.Exigence;
import org.xtext.gameuno.unoDsl.RegleJeu;
import org.xtext.gameuno.unoDsl.UnoDsl;
import org.xtext.gameuno.unoDsl.UnoDslPackage;

@SuppressWarnings("all")
public class UnoDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private UnoDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == UnoDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case UnoDslPackage.CARTE:
				sequence_Carte(context, (Carte) semanticObject); 
				return; 
			case UnoDslPackage.CARTE_ACTIVE:
				sequence_CarteActive(context, (CarteActive) semanticObject); 
				return; 
			case UnoDslPackage.CARTE_CLASSIQUE:
				sequence_CarteClassique(context, (CarteClassique) semanticObject); 
				return; 
			case UnoDslPackage.EXIGENCE:
				sequence_Exigence(context, (Exigence) semanticObject); 
				return; 
			case UnoDslPackage.REGLE_JEU:
				sequence_RegleJeu(context, (RegleJeu) semanticObject); 
				return; 
			case UnoDslPackage.UNO_DSL:
				sequence_UnoDsl(context, (UnoDsl) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Carte returns CarteActive
	 *     CarteActive returns CarteActive
	 *
	 * Constraint:
	 *     couleur=CouleurCarte
	 */
	protected void sequence_CarteActive(ISerializationContext context, CarteActive semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UnoDslPackage.Literals.CARTE__COULEUR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnoDslPackage.Literals.CARTE__COULEUR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCarteActiveAccess().getCouleurCouleurCarteParserRuleCall_2_0(), semanticObject.getCouleur());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Carte returns CarteClassique
	 *     CarteClassique returns CarteClassique
	 *
	 * Constraint:
	 *     (numeroCarte=INT couleur=CouleurCarte)
	 */
	protected void sequence_CarteClassique(ISerializationContext context, CarteClassique semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UnoDslPackage.Literals.CARTE_CLASSIQUE__NUMERO_CARTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnoDslPackage.Literals.CARTE_CLASSIQUE__NUMERO_CARTE));
			if (transientValues.isValueTransient(semanticObject, UnoDslPackage.Literals.CARTE__COULEUR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UnoDslPackage.Literals.CARTE__COULEUR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCarteClassiqueAccess().getNumeroCarteINTTerminalRuleCall_1_0(), semanticObject.getNumeroCarte());
		feeder.accept(grammarAccess.getCarteClassiqueAccess().getCouleurCouleurCarteParserRuleCall_2_1_0(), semanticObject.getCouleur());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Carte returns Carte
	 *
	 * Constraint:
	 *     {Carte}
	 */
	protected void sequence_Carte(ISerializationContext context, Carte semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Exigence returns Exigence
	 *
	 * Constraint:
	 *     (
	 *         expr1=Expr1 
	 *         linker1=Linker1? 
	 *         linker2=Linker2 
	 *         (carte+=Carte carte+=Carte*)? 
	 *         linker3=Linker3? 
	 *         expr2=Expr2?
	 *     )
	 */
	protected void sequence_Exigence(ISerializationContext context, Exigence semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RegleJeu returns RegleJeu
	 *
	 * Constraint:
	 *     (name=STRING description=STRING exigence+=Exigence* exigence+=Exigence)
	 */
	protected void sequence_RegleJeu(ISerializationContext context, RegleJeu semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnoDsl returns UnoDsl
	 *
	 * Constraint:
	 *     (regles+=RegleJeu regles+=RegleJeu*)
	 */
	protected void sequence_UnoDsl(ISerializationContext context, UnoDsl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
