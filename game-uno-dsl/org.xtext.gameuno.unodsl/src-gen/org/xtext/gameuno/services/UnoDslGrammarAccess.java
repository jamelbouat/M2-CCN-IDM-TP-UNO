/*
 * generated by Xtext 2.23.0
 */
package org.xtext.gameuno.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class UnoDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class UnoDslElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gameuno.UnoDsl.UnoDsl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReglesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReglesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReglesRegleJeuParserRuleCall_2_0 = (RuleCall)cReglesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cReglesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cReglesRegleJeuParserRuleCall_3_1_0 = (RuleCall)cReglesAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UnoDsl:
		//	'regles:' '[' regles+=RegleJeu (',' regles+=RegleJeu)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'regles:' '[' regles+=RegleJeu (',' regles+=RegleJeu)* ']'
		public Group getGroup() { return cGroup; }
		
		//'regles:'
		public Keyword getReglesKeyword_0() { return cReglesKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//regles+=RegleJeu
		public Assignment getReglesAssignment_2() { return cReglesAssignment_2; }
		
		//RegleJeu
		public RuleCall getReglesRegleJeuParserRuleCall_2_0() { return cReglesRegleJeuParserRuleCall_2_0; }
		
		//(',' regles+=RegleJeu)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//regles+=RegleJeu
		public Assignment getReglesAssignment_3_1() { return cReglesAssignment_3_1; }
		
		//RegleJeu
		public RuleCall getReglesRegleJeuParserRuleCall_3_1_0() { return cReglesRegleJeuParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class RegleJeuElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gameuno.UnoDsl.RegleJeu");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cNom_regleKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDescriptionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cDescriptionAssignment_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExigencesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Assignment cExigenceAssignment_3_2_0 = (Assignment)cGroup_3_2.eContents().get(0);
		private final RuleCall cExigenceExigenceParserRuleCall_3_2_0_0 = (RuleCall)cExigenceAssignment_3_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Assignment cExigenceAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cExigenceExigenceParserRuleCall_3_3_0 = (RuleCall)cExigenceAssignment_3_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RegleJeu:
		//	'{' ('nom_regle:' name=STRING ',') ('description:' description=STRING ',') ('exigences:' '[' (exigence+=Exigence ',')*
		//	exigence+=Exigence ']')
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' ('nom_regle:' name=STRING ',') ('description:' description=STRING ',') ('exigences:' '[' (exigence+=Exigence ',')*
		//exigence+=Exigence ']') '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//('nom_regle:' name=STRING ',')
		public Group getGroup_1() { return cGroup_1; }
		
		//'nom_regle:'
		public Keyword getNom_regleKeyword_1_0() { return cNom_regleKeyword_1_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_1_0() { return cNameSTRINGTerminalRuleCall_1_1_0; }
		
		//','
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
		
		//('description:' description=STRING ',')
		public Group getGroup_2() { return cGroup_2; }
		
		//'description:'
		public Keyword getDescriptionKeyword_2_0() { return cDescriptionKeyword_2_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_2_1() { return cDescriptionAssignment_2_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_1_0() { return cDescriptionSTRINGTerminalRuleCall_2_1_0; }
		
		//','
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }
		
		//('exigences:' '[' (exigence+=Exigence ',')* exigence+=Exigence ']')
		public Group getGroup_3() { return cGroup_3; }
		
		//'exigences:'
		public Keyword getExigencesKeyword_3_0() { return cExigencesKeyword_3_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_1() { return cLeftSquareBracketKeyword_3_1; }
		
		//(exigence+=Exigence ',')*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//exigence+=Exigence
		public Assignment getExigenceAssignment_3_2_0() { return cExigenceAssignment_3_2_0; }
		
		//Exigence
		public RuleCall getExigenceExigenceParserRuleCall_3_2_0_0() { return cExigenceExigenceParserRuleCall_3_2_0_0; }
		
		//','
		public Keyword getCommaKeyword_3_2_1() { return cCommaKeyword_3_2_1; }
		
		//exigence+=Exigence
		public Assignment getExigenceAssignment_3_3() { return cExigenceAssignment_3_3; }
		
		//Exigence
		public RuleCall getExigenceExigenceParserRuleCall_3_3_0() { return cExigenceExigenceParserRuleCall_3_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_4() { return cRightSquareBracketKeyword_3_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ExigenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gameuno.UnoDsl.Exigence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpr1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpr1Expr1ParserRuleCall_0_0 = (RuleCall)cExpr1Assignment_0.eContents().get(0);
		private final Assignment cLinker1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinker1Linker1ParserRuleCall_1_0 = (RuleCall)cLinker1Assignment_1.eContents().get(0);
		private final Assignment cLinker2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLinker2Linker2ParserRuleCall_2_0 = (RuleCall)cLinker2Assignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cCarteAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cCarteCarteParserRuleCall_3_0_0 = (RuleCall)cCarteAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cCarteAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cCarteCarteParserRuleCall_3_1_1_0 = (RuleCall)cCarteAssignment_3_1_1.eContents().get(0);
		private final Assignment cLinker3Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLinker3Linker3ParserRuleCall_4_0 = (RuleCall)cLinker3Assignment_4.eContents().get(0);
		private final Assignment cExpr2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpr2Expr2ParserRuleCall_5_0 = (RuleCall)cExpr2Assignment_5.eContents().get(0);
		
		//Exigence:
		//	expr1=Expr1 linker1=Linker1? linker2=Linker2 (carte+=Carte (',' carte+=Carte)*)? linker3=Linker3? expr2=Expr2?;
		@Override public ParserRule getRule() { return rule; }
		
		//expr1=Expr1 linker1=Linker1? linker2=Linker2 (carte+=Carte (',' carte+=Carte)*)? linker3=Linker3? expr2=Expr2?
		public Group getGroup() { return cGroup; }
		
		//expr1=Expr1
		public Assignment getExpr1Assignment_0() { return cExpr1Assignment_0; }
		
		//Expr1
		public RuleCall getExpr1Expr1ParserRuleCall_0_0() { return cExpr1Expr1ParserRuleCall_0_0; }
		
		//linker1=Linker1?
		public Assignment getLinker1Assignment_1() { return cLinker1Assignment_1; }
		
		//Linker1
		public RuleCall getLinker1Linker1ParserRuleCall_1_0() { return cLinker1Linker1ParserRuleCall_1_0; }
		
		//linker2=Linker2
		public Assignment getLinker2Assignment_2() { return cLinker2Assignment_2; }
		
		//Linker2
		public RuleCall getLinker2Linker2ParserRuleCall_2_0() { return cLinker2Linker2ParserRuleCall_2_0; }
		
		//(carte+=Carte (',' carte+=Carte)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//carte+=Carte
		public Assignment getCarteAssignment_3_0() { return cCarteAssignment_3_0; }
		
		//Carte
		public RuleCall getCarteCarteParserRuleCall_3_0_0() { return cCarteCarteParserRuleCall_3_0_0; }
		
		//(',' carte+=Carte)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//carte+=Carte
		public Assignment getCarteAssignment_3_1_1() { return cCarteAssignment_3_1_1; }
		
		//Carte
		public RuleCall getCarteCarteParserRuleCall_3_1_1_0() { return cCarteCarteParserRuleCall_3_1_1_0; }
		
		//linker3=Linker3?
		public Assignment getLinker3Assignment_4() { return cLinker3Assignment_4; }
		
		//Linker3
		public RuleCall getLinker3Linker3ParserRuleCall_4_0() { return cLinker3Linker3ParserRuleCall_4_0; }
		
		//expr2=Expr2?
		public Assignment getExpr2Assignment_5() { return cExpr2Assignment_5; }
		
		//Expr2
		public RuleCall getExpr2Expr2ParserRuleCall_5_0() { return cExpr2Expr2ParserRuleCall_5_0; }
	}
	public class Expr1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gameuno.UnoDsl.Expr1");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLeJoueurKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cJoueursKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLeJeuKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Expr1:
		//	'le joueur' | 'joueurs' | 'le jeu';
		@Override public ParserRule getRule() { return rule; }
		
		//'le joueur' | 'joueurs' | 'le jeu'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'le joueur'
		public Keyword getLeJoueurKeyword_0() { return cLeJoueurKeyword_0; }
		
		//'joueurs'
		public Keyword getJoueursKeyword_1() { return cJoueursKeyword_1; }
		
		//'le jeu'
		public Keyword getLeJeuKeyword_2() { return cLeJeuKeyword_2; }
	}
	public class Linker1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gameuno.UnoDsl.Linker1");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDitInterceptionEtKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSuivantKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Linker1:
		//	'dit interception et ' | 'suivant';
		@Override public ParserRule getRule() { return rule; }
		
		//'dit interception et ' | 'suivant'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'dit interception et '
		public Keyword getDitInterceptionEtKeyword_0() { return cDitInterceptionEtKeyword_0; }
		
		//'suivant'
		public Keyword getSuivantKeyword_1() { return cSuivantKeyword_1; }
	}
	public class Linker2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gameuno.UnoDsl.Linker2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPoseKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPiocheKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLimiteKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGagneKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTourneKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cImposeKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cEchangeKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cPasseKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//Linker2:
		//	'pose' | 'pioche' | 'limite' | 'gagne' | 'tourne' | 'impose' | 'echange' | 'passe';
		@Override public ParserRule getRule() { return rule; }
		
		//'pose' | 'pioche' | 'limite' | 'gagne' | 'tourne' | 'impose' | 'echange' | 'passe'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'pose'
		public Keyword getPoseKeyword_0() { return cPoseKeyword_0; }
		
		//'pioche'
		public Keyword getPiocheKeyword_1() { return cPiocheKeyword_1; }
		
		//'limite'
		public Keyword getLimiteKeyword_2() { return cLimiteKeyword_2; }
		
		//'gagne'
		public Keyword getGagneKeyword_3() { return cGagneKeyword_3; }
		
		//'tourne'
		public Keyword getTourneKeyword_4() { return cTourneKeyword_4; }
		
		//'impose'
		public Keyword getImposeKeyword_5() { return cImposeKeyword_5; }
		
		//'echange'
		public Keyword getEchangeKeyword_6() { return cEchangeKeyword_6; }
		
		//'passe'
		public Keyword getPasseKeyword_7() { return cPasseKeyword_7; }
	}
	public class Linker3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gameuno.UnoDsl.Linker3");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSiMemeCouleurKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSiMemeNumeroKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Linker3:
		//	'si meme couleur' | 'si meme numero';
		@Override public ParserRule getRule() { return rule; }
		
		//'si meme couleur' | 'si meme numero'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'si meme couleur'
		public Keyword getSiMemeCouleurKeyword_0() { return cSiMemeCouleurKeyword_0; }
		
		//'si meme numero'
		public Keyword getSiMemeNumeroKeyword_1() { return cSiMemeNumeroKeyword_1; }
	}
	public class Expr2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gameuno.UnoDsl.Expr2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSurLaPileTalonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDeLaPiochePileKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLeTempsDeLaMancheKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDansLeSensInverseKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLesMainsKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cSiPointsAccumules500Keyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cSiCartePiochEEleveeKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cSesCartesAvecAutreJoueurKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cSonTourKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//Expr2:
		//	'sur la pile-talon' | 'de la pioche-pile' | 'le temps de la manche' | 'dans le sens inverse' |
		//	'les mains' | 'si points accumules 500' | 'si carte piochée +elevee' | 'ses cartes avec autre joueur' |
		//	'son tour';
		@Override public ParserRule getRule() { return rule; }
		
		//'sur la pile-talon' | 'de la pioche-pile' | 'le temps de la manche' | 'dans le sens inverse' | 'les mains' |
		//'si points accumules 500' | 'si carte piochée +elevee' | 'ses cartes avec autre joueur' | 'son tour'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'sur la pile-talon'
		public Keyword getSurLaPileTalonKeyword_0() { return cSurLaPileTalonKeyword_0; }
		
		//'de la pioche-pile'
		public Keyword getDeLaPiochePileKeyword_1() { return cDeLaPiochePileKeyword_1; }
		
		//'le temps de la manche'
		public Keyword getLeTempsDeLaMancheKeyword_2() { return cLeTempsDeLaMancheKeyword_2; }
		
		//'dans le sens inverse'
		public Keyword getDansLeSensInverseKeyword_3() { return cDansLeSensInverseKeyword_3; }
		
		//'les mains'
		public Keyword getLesMainsKeyword_4() { return cLesMainsKeyword_4; }
		
		//'si points accumules 500'
		public Keyword getSiPointsAccumules500Keyword_5() { return cSiPointsAccumules500Keyword_5; }
		
		//'si carte piochée +elevee'
		public Keyword getSiCartePiochEEleveeKeyword_6() { return cSiCartePiochEEleveeKeyword_6; }
		
		//'ses cartes avec autre joueur'
		public Keyword getSesCartesAvecAutreJoueurKeyword_7() { return cSesCartesAvecAutreJoueurKeyword_7; }
		
		//'son tour'
		public Keyword getSonTourKeyword_8() { return cSonTourKeyword_8; }
	}
	public class CarteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gameuno.UnoDsl.Carte");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCarteClassiqueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCarteActiveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cCarteAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cCarteNoireParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//Carte:
		//	CarteClassique | CarteActive | {Carte} CarteNoire;
		@Override public ParserRule getRule() { return rule; }
		
		//CarteClassique | CarteActive | {Carte} CarteNoire
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CarteClassique
		public RuleCall getCarteClassiqueParserRuleCall_0() { return cCarteClassiqueParserRuleCall_0; }
		
		//CarteActive
		public RuleCall getCarteActiveParserRuleCall_1() { return cCarteActiveParserRuleCall_1; }
		
		//{Carte} CarteNoire
		public Group getGroup_2() { return cGroup_2; }
		
		//{Carte}
		public Action getCarteAction_2_0() { return cCarteAction_2_0; }
		
		//CarteNoire
		public RuleCall getCarteNoireParserRuleCall_2_1() { return cCarteNoireParserRuleCall_2_1; }
	}
	public class CarteClassiqueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gameuno.UnoDsl.CarteClassique");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCarteNumeroKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNumeroCarteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumeroCarteINTTerminalRuleCall_1_0 = (RuleCall)cNumeroCarteAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCouleurKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCouleurAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCouleurCouleurCarteParserRuleCall_2_1_0 = (RuleCall)cCouleurAssignment_2_1.eContents().get(0);
		
		//CarteClassique:
		//	'carte-numero-' numeroCarte=INT ('-couleur-' couleur=CouleurCarte);
		@Override public ParserRule getRule() { return rule; }
		
		//'carte-numero-' numeroCarte=INT ('-couleur-' couleur=CouleurCarte)
		public Group getGroup() { return cGroup; }
		
		//'carte-numero-'
		public Keyword getCarteNumeroKeyword_0() { return cCarteNumeroKeyword_0; }
		
		//numeroCarte=INT
		public Assignment getNumeroCarteAssignment_1() { return cNumeroCarteAssignment_1; }
		
		//INT
		public RuleCall getNumeroCarteINTTerminalRuleCall_1_0() { return cNumeroCarteINTTerminalRuleCall_1_0; }
		
		//('-couleur-' couleur=CouleurCarte)
		public Group getGroup_2() { return cGroup_2; }
		
		//'-couleur-'
		public Keyword getCouleurKeyword_2_0() { return cCouleurKeyword_2_0; }
		
		//couleur=CouleurCarte
		public Assignment getCouleurAssignment_2_1() { return cCouleurAssignment_2_1; }
		
		//CouleurCarte
		public RuleCall getCouleurCouleurCarteParserRuleCall_2_1_0() { return cCouleurCouleurCarteParserRuleCall_2_1_0; }
	}
	public class CarteActiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gameuno.UnoDsl.CarteActive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cCartePasserTourKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCartePlus2Keyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cCarteInversionKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cCouleurKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCouleurAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCouleurCouleurCarteParserRuleCall_2_0 = (RuleCall)cCouleurAssignment_2.eContents().get(0);
		
		//CarteActive:
		//	('carte-passer-tour' | 'carte-plus-2' | 'carte-inversion') '-couleur-' couleur=CouleurCarte;
		@Override public ParserRule getRule() { return rule; }
		
		//('carte-passer-tour' | 'carte-plus-2' | 'carte-inversion') '-couleur-' couleur=CouleurCarte
		public Group getGroup() { return cGroup; }
		
		//('carte-passer-tour' | 'carte-plus-2' | 'carte-inversion')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'carte-passer-tour'
		public Keyword getCartePasserTourKeyword_0_0() { return cCartePasserTourKeyword_0_0; }
		
		//'carte-plus-2'
		public Keyword getCartePlus2Keyword_0_1() { return cCartePlus2Keyword_0_1; }
		
		//'carte-inversion'
		public Keyword getCarteInversionKeyword_0_2() { return cCarteInversionKeyword_0_2; }
		
		//'-couleur-'
		public Keyword getCouleurKeyword_1() { return cCouleurKeyword_1; }
		
		//couleur=CouleurCarte
		public Assignment getCouleurAssignment_2() { return cCouleurAssignment_2; }
		
		//CouleurCarte
		public RuleCall getCouleurCouleurCarteParserRuleCall_2_0() { return cCouleurCouleurCarteParserRuleCall_2_0; }
	}
	public class CarteNoireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gameuno.UnoDsl.CarteNoire");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCartePlus4Keyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCarteJokerKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCarteUnoKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//CarteNoire:
		//	'carte-plus-4' | 'carte-joker' | 'carte-uno';
		@Override public ParserRule getRule() { return rule; }
		
		//'carte-plus-4' | 'carte-joker' | 'carte-uno'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'carte-plus-4'
		public Keyword getCartePlus4Keyword_0() { return cCartePlus4Keyword_0; }
		
		//'carte-joker'
		public Keyword getCarteJokerKeyword_1() { return cCarteJokerKeyword_1; }
		
		//'carte-uno'
		public Keyword getCarteUnoKeyword_2() { return cCarteUnoKeyword_2; }
	}
	public class CouleurCarteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.gameuno.UnoDsl.CouleurCarte");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRougeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cJauneKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBleuKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cVertKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//CouleurCarte:
		//	'rouge' | 'jaune' | 'bleu' | 'vert';
		@Override public ParserRule getRule() { return rule; }
		
		//'rouge' | 'jaune' | 'bleu' | 'vert'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'rouge'
		public Keyword getRougeKeyword_0() { return cRougeKeyword_0; }
		
		//'jaune'
		public Keyword getJauneKeyword_1() { return cJauneKeyword_1; }
		
		//'bleu'
		public Keyword getBleuKeyword_2() { return cBleuKeyword_2; }
		
		//'vert'
		public Keyword getVertKeyword_3() { return cVertKeyword_3; }
	}
	
	
	private final UnoDslElements pUnoDsl;
	private final RegleJeuElements pRegleJeu;
	private final ExigenceElements pExigence;
	private final Expr1Elements pExpr1;
	private final Linker1Elements pLinker1;
	private final Linker2Elements pLinker2;
	private final Linker3Elements pLinker3;
	private final Expr2Elements pExpr2;
	private final CarteElements pCarte;
	private final CarteClassiqueElements pCarteClassique;
	private final CarteActiveElements pCarteActive;
	private final CarteNoireElements pCarteNoire;
	private final CouleurCarteElements pCouleurCarte;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UnoDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pUnoDsl = new UnoDslElements();
		this.pRegleJeu = new RegleJeuElements();
		this.pExigence = new ExigenceElements();
		this.pExpr1 = new Expr1Elements();
		this.pLinker1 = new Linker1Elements();
		this.pLinker2 = new Linker2Elements();
		this.pLinker3 = new Linker3Elements();
		this.pExpr2 = new Expr2Elements();
		this.pCarte = new CarteElements();
		this.pCarteClassique = new CarteClassiqueElements();
		this.pCarteActive = new CarteActiveElements();
		this.pCarteNoire = new CarteNoireElements();
		this.pCouleurCarte = new CouleurCarteElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.gameuno.UnoDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//UnoDsl:
	//	'regles:' '[' regles+=RegleJeu (',' regles+=RegleJeu)* ']';
	public UnoDslElements getUnoDslAccess() {
		return pUnoDsl;
	}
	
	public ParserRule getUnoDslRule() {
		return getUnoDslAccess().getRule();
	}
	
	//RegleJeu:
	//	'{' ('nom_regle:' name=STRING ',') ('description:' description=STRING ',') ('exigences:' '[' (exigence+=Exigence ',')*
	//	exigence+=Exigence ']')
	//	'}';
	public RegleJeuElements getRegleJeuAccess() {
		return pRegleJeu;
	}
	
	public ParserRule getRegleJeuRule() {
		return getRegleJeuAccess().getRule();
	}
	
	//Exigence:
	//	expr1=Expr1 linker1=Linker1? linker2=Linker2 (carte+=Carte (',' carte+=Carte)*)? linker3=Linker3? expr2=Expr2?;
	public ExigenceElements getExigenceAccess() {
		return pExigence;
	}
	
	public ParserRule getExigenceRule() {
		return getExigenceAccess().getRule();
	}
	
	//Expr1:
	//	'le joueur' | 'joueurs' | 'le jeu';
	public Expr1Elements getExpr1Access() {
		return pExpr1;
	}
	
	public ParserRule getExpr1Rule() {
		return getExpr1Access().getRule();
	}
	
	//Linker1:
	//	'dit interception et ' | 'suivant';
	public Linker1Elements getLinker1Access() {
		return pLinker1;
	}
	
	public ParserRule getLinker1Rule() {
		return getLinker1Access().getRule();
	}
	
	//Linker2:
	//	'pose' | 'pioche' | 'limite' | 'gagne' | 'tourne' | 'impose' | 'echange' | 'passe';
	public Linker2Elements getLinker2Access() {
		return pLinker2;
	}
	
	public ParserRule getLinker2Rule() {
		return getLinker2Access().getRule();
	}
	
	//Linker3:
	//	'si meme couleur' | 'si meme numero';
	public Linker3Elements getLinker3Access() {
		return pLinker3;
	}
	
	public ParserRule getLinker3Rule() {
		return getLinker3Access().getRule();
	}
	
	//Expr2:
	//	'sur la pile-talon' | 'de la pioche-pile' | 'le temps de la manche' | 'dans le sens inverse' |
	//	'les mains' | 'si points accumules 500' | 'si carte piochée +elevee' | 'ses cartes avec autre joueur' |
	//	'son tour';
	public Expr2Elements getExpr2Access() {
		return pExpr2;
	}
	
	public ParserRule getExpr2Rule() {
		return getExpr2Access().getRule();
	}
	
	//Carte:
	//	CarteClassique | CarteActive | {Carte} CarteNoire;
	public CarteElements getCarteAccess() {
		return pCarte;
	}
	
	public ParserRule getCarteRule() {
		return getCarteAccess().getRule();
	}
	
	//CarteClassique:
	//	'carte-numero-' numeroCarte=INT ('-couleur-' couleur=CouleurCarte);
	public CarteClassiqueElements getCarteClassiqueAccess() {
		return pCarteClassique;
	}
	
	public ParserRule getCarteClassiqueRule() {
		return getCarteClassiqueAccess().getRule();
	}
	
	//CarteActive:
	//	('carte-passer-tour' | 'carte-plus-2' | 'carte-inversion') '-couleur-' couleur=CouleurCarte;
	public CarteActiveElements getCarteActiveAccess() {
		return pCarteActive;
	}
	
	public ParserRule getCarteActiveRule() {
		return getCarteActiveAccess().getRule();
	}
	
	//CarteNoire:
	//	'carte-plus-4' | 'carte-joker' | 'carte-uno';
	public CarteNoireElements getCarteNoireAccess() {
		return pCarteNoire;
	}
	
	public ParserRule getCarteNoireRule() {
		return getCarteNoireAccess().getRule();
	}
	
	//CouleurCarte:
	//	'rouge' | 'jaune' | 'bleu' | 'vert';
	public CouleurCarteElements getCouleurCarteAccess() {
		return pCouleurCarte;
	}
	
	public ParserRule getCouleurCarteRule() {
		return getCouleurCarteAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
