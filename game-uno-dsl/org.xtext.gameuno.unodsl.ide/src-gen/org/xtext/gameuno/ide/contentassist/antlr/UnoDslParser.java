/*
 * generated by Xtext 2.23.0
 */
package org.xtext.gameuno.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.gameuno.ide.contentassist.antlr.internal.InternalUnoDslParser;
import org.xtext.gameuno.services.UnoDslGrammarAccess;

public class UnoDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(UnoDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, UnoDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getExpr1Access().getAlternatives(), "rule__Expr1__Alternatives");
			builder.put(grammarAccess.getLinker1Access().getAlternatives(), "rule__Linker1__Alternatives");
			builder.put(grammarAccess.getLinker2Access().getAlternatives(), "rule__Linker2__Alternatives");
			builder.put(grammarAccess.getLinker3Access().getAlternatives(), "rule__Linker3__Alternatives");
			builder.put(grammarAccess.getExpr2Access().getAlternatives(), "rule__Expr2__Alternatives");
			builder.put(grammarAccess.getCarteAccess().getAlternatives(), "rule__Carte__Alternatives");
			builder.put(grammarAccess.getCarteActiveAccess().getAlternatives_0(), "rule__CarteActive__Alternatives_0");
			builder.put(grammarAccess.getCarteNoireAccess().getAlternatives(), "rule__CarteNoire__Alternatives");
			builder.put(grammarAccess.getCouleurCarteAccess().getAlternatives(), "rule__CouleurCarte__Alternatives");
			builder.put(grammarAccess.getUnoDslAccess().getGroup(), "rule__UnoDsl__Group__0");
			builder.put(grammarAccess.getUnoDslAccess().getGroup_3(), "rule__UnoDsl__Group_3__0");
			builder.put(grammarAccess.getRegleJeuAccess().getGroup(), "rule__RegleJeu__Group__0");
			builder.put(grammarAccess.getRegleJeuAccess().getGroup_1(), "rule__RegleJeu__Group_1__0");
			builder.put(grammarAccess.getRegleJeuAccess().getGroup_2(), "rule__RegleJeu__Group_2__0");
			builder.put(grammarAccess.getRegleJeuAccess().getGroup_3(), "rule__RegleJeu__Group_3__0");
			builder.put(grammarAccess.getRegleJeuAccess().getGroup_3_2(), "rule__RegleJeu__Group_3_2__0");
			builder.put(grammarAccess.getExigenceAccess().getGroup(), "rule__Exigence__Group__0");
			builder.put(grammarAccess.getExigenceAccess().getGroup_3(), "rule__Exigence__Group_3__0");
			builder.put(grammarAccess.getExigenceAccess().getGroup_3_1(), "rule__Exigence__Group_3_1__0");
			builder.put(grammarAccess.getCarteAccess().getGroup_2(), "rule__Carte__Group_2__0");
			builder.put(grammarAccess.getCarteClassiqueAccess().getGroup(), "rule__CarteClassique__Group__0");
			builder.put(grammarAccess.getCarteClassiqueAccess().getGroup_2(), "rule__CarteClassique__Group_2__0");
			builder.put(grammarAccess.getCarteActiveAccess().getGroup(), "rule__CarteActive__Group__0");
			builder.put(grammarAccess.getUnoDslAccess().getReglesAssignment_2(), "rule__UnoDsl__ReglesAssignment_2");
			builder.put(grammarAccess.getUnoDslAccess().getReglesAssignment_3_1(), "rule__UnoDsl__ReglesAssignment_3_1");
			builder.put(grammarAccess.getRegleJeuAccess().getNameAssignment_1_1(), "rule__RegleJeu__NameAssignment_1_1");
			builder.put(grammarAccess.getRegleJeuAccess().getDescriptionAssignment_2_1(), "rule__RegleJeu__DescriptionAssignment_2_1");
			builder.put(grammarAccess.getRegleJeuAccess().getExigenceAssignment_3_2_0(), "rule__RegleJeu__ExigenceAssignment_3_2_0");
			builder.put(grammarAccess.getRegleJeuAccess().getExigenceAssignment_3_3(), "rule__RegleJeu__ExigenceAssignment_3_3");
			builder.put(grammarAccess.getExigenceAccess().getExpr1Assignment_0(), "rule__Exigence__Expr1Assignment_0");
			builder.put(grammarAccess.getExigenceAccess().getLinker1Assignment_1(), "rule__Exigence__Linker1Assignment_1");
			builder.put(grammarAccess.getExigenceAccess().getLinker2Assignment_2(), "rule__Exigence__Linker2Assignment_2");
			builder.put(grammarAccess.getExigenceAccess().getCarteAssignment_3_0(), "rule__Exigence__CarteAssignment_3_0");
			builder.put(grammarAccess.getExigenceAccess().getCarteAssignment_3_1_1(), "rule__Exigence__CarteAssignment_3_1_1");
			builder.put(grammarAccess.getExigenceAccess().getLinker3Assignment_4(), "rule__Exigence__Linker3Assignment_4");
			builder.put(grammarAccess.getExigenceAccess().getExpr2Assignment_5(), "rule__Exigence__Expr2Assignment_5");
			builder.put(grammarAccess.getCarteClassiqueAccess().getNumeroCarteAssignment_1(), "rule__CarteClassique__NumeroCarteAssignment_1");
			builder.put(grammarAccess.getCarteClassiqueAccess().getCouleurAssignment_2_1(), "rule__CarteClassique__CouleurAssignment_2_1");
			builder.put(grammarAccess.getCarteActiveAccess().getCouleurAssignment_2(), "rule__CarteActive__CouleurAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private UnoDslGrammarAccess grammarAccess;

	@Override
	protected InternalUnoDslParser createParser() {
		InternalUnoDslParser result = new InternalUnoDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public UnoDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(UnoDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
